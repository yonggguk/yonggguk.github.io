[ { "title": "7월 3주차 리뷰", "url": "/posts/3rd-Week-Review/", "categories": "WeekReview, R-2022-07", "tags": "Review", "date": "2022-07-19 16:00:00 +0900", "snippet": "7월 3주차 리뷰~꾸준함이 부족했다.3주차는 꾸준함이 조금 부족했다. 시작한 깃헙 페이지로 공부한 포스트를 정리 해놓지 못했고 또한, 공부한 것들도 깊숙하게 공부하지 못한 느낌이 든다.더 시간을 투자하면서 더 효율적인 방법을 찾아야겠다!계획이 부족했다.너무 이것저것 주먹구구식으로 3주차를 살았던 것(?) 같다.좀 더 체계적이고 구체적인 계획을 세우고 실천해야겠다. 가끔은 일단 하는 실천력도 중요하지만 정리를 하면서 진행해 나가야할 필요가 있다.3주차 결과만족하지 못한 주였다. 개발을 하면서 공부를 하면서, 정리되는 것이 없고 내 것으로 만들지 못했다고 생각했다. 복습은 필수요! 성장도 필수요! 날이 덥지만 의욕은 더 뜨겁게 4주차를 시작해보자!3주차 리뷰도 4주차에 쓰는 것이 말이 되는가…?!" }, { "title": "Java ArrayList, Array Sorting, 다중 정렬", "url": "/posts/Sorting/", "categories": "Algorithm", "tags": "Algorithm", "date": "2022-07-19 09:00:00 +0900", "snippet": "" }, { "title": "getter와 setter를 사용하는 이유", "url": "/posts/What-is-the-getter-and-setter/", "categories": "JAVA", "tags": "Question, java", "date": "2022-07-13 10:00:00 +0900", "snippet": "getter와 setter를 사용하는 이유에 대해이 글을 읽기 전 알고 있어야 할 지식들?!각 접근 제어자의 차이점각 접근 제어자의 차이점을객제지향 설계 5원칙가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사가나다라마바사자바에서 @getter와 @setter를 사용하는 이유?testpublic class main{ public static void main(String args[]){ }}" }, { "title": "접근제어자에 대해 알아봅시다!", "url": "/posts/What-is-the-Access-Modifier/", "categories": "JAVA", "tags": "Question", "date": "2022-07-07 09:00:00 +0900", "snippet": "접근제어자(Access Modifier)란 무엇일까?접근제어자란. 변수와 함수, 클래스에 대한 접근을 제한하는 역할을 하는 예약어입니다.접근제어자를 사용하는 이유는?우리가 항상 문제를 해결하거나 문제를 해결하기 위해 프로그래밍을 할 때 각 기능을 사용하는 이유와 근거가 있어야 합니다! 서론이 길었지만 … 지금부터 그럼, 우리가 접근제어자를 사용하는 이유에 대해 알아봅시다. 첫번째 이유로는 보안 때문입니다. 모든 변수를 public으로 설정하게 된다면 어디서든지 변경 또는 참조가 가능하여 무분별한 사용과 변경으로 중요한 정보가 노출되거나 변경될 수 있기 때문입니다. 두번째 이유로는, 외부로 생기는 오류를 줄이기 위함이다. 사용자나 외부에서 사용하는 객체에서 내부적으로 사용하는 변수나 메소드에 접근함으로 개발자가 의도하지 않은 오류를 야기할 수 있기 때문입니다. 세번째 이유로는, 객체 사용에 집중할 수 있도록 돕기 위함입니다. 객체를 조작할 수 있는 수단만을 제공함으로 객체 사용에 집중을 하도록 합니다. 접근제어자의 종류 public protected default private privateprivate이 붙은 변수, 메소드는 해당 글래스에서만 접근이 가능하다.default접근 제어자를 별도로 설정하지 않는다면 접근 제어자가 없는 변수, 메소드는 default 접근 제어자가 되어 해당 패키지 내에서만 접근이 가능하다.protectedprotected가 붙은 변수, 메소드는 동일 패키지의 클래스 또는 해당 클래스를 상속받은 다른 패키지의 클래스에서만 접근이 가능하다.publicpublic으로 설정되었다면 public 접근제어자가 붙은 변수, 메소드는 어떤 클래스에서라도 접근이 가능하다.접근 범위public &gt; protected &gt; default &gt; privatereference : 생활코딩, 점프 투 자바" }, { "title": "What is software developer...?", "url": "/posts/What-is-software-developer/", "categories": "yong'sThinking, T-2022-07", "tags": "Thinking", "date": "2022-07-05 09:00:00 +0900", "snippet": "개발자란 ??어떤 유튜브 영상이였는지는 정확히 기억이 나지 않지만 한 말씀이 제일 기억이 남았다.개발자는 코드를 작성하는 직업이 아니라 문제를 해결하는 직업이다. 라는 말씀이었다.이 말씀을 들은 이후 그동안에 내가 진짜 개발자였는지 그냥 코드만 작성하려는 사람이었는지 생각하게 되었다.지금껏 걸어온 길을 되돌아보니 나는 개발자보단 코드만 작성하려는 사람이 맞았다. 문제를 해결하기 위해 코드를 작성하려는 것이 아닌코드를 작성하고 문제 해결은 생각도 하지 않았던 것 같다. 이것이 그 동안 얕게만 공부하던 이유지 않을까?코드를 작성하는데 고민이 별로 없었던 이유지 않을까? 라는 생각을 하게 되었다.늦었지만… 지금부터라도 문제를 해결하기 위해 코드를 작성하는 개발자가 되어야겠다…개발자부터 돼봐야겠다. 한 걸음씩…" }, { "title": "Start 거북이 개발자의 블로그", "url": "/posts/To-Many-Shovel/", "categories": "WeekReview, R-2022-07", "tags": "Review", "date": "2022-07-04 09:00:00 +0900", "snippet": "내 경험과 지식을 공유함과 동시에 내가 그 날 공부한 것들을 잘 이해하고 있는지를 기록하기 위함인 블로그입니다.많은 개발자 분들이 지식을 얻어감과 동시에 많은 피드백을 해주시면 감사하겠습니다!!깃허브 블로그를 생성하기 위해 너무 많은 시간을 소비하였다." }, { "title": "Github 블로그 생성하기 ver.0.0.1", "url": "/posts/How-to-make-github-blog/", "categories": "GithubBlog", "tags": "Guide", "date": "2022-07-04 09:00:00 +0900", "snippet": "chirpy가 아닌 다른 테마 또는 직접 코드를 작성하여 깃허브 블로그를 사용하실 분에게는 참고만 하시거나 다른 글을 찾아보시길 바랍니다.Base Settingsruby가 필요하므로 ruby를 설치하시길 바랍니다reference : ruby install docschripy theme 적용 chirpy를 통해 직접 설치 github에서 fork 받아서 만들기 zip file download를 통해 설치하기저는 3번째 방법을 사용했기에 이 글에서는 3번째 방법만 다룰 예정입니다.github page repo를 생성했다는 가정 하에 진행하겠습니다!.chirpy theme zip파일 다운받기 chripy theme 옆 chripy theme github에서 chripy theme 코드 파일을 받은 후 github page local repo에 올려주시면 되겠습니다. local repo에 올린 후 remote repo로 commit을 해주세요. (주의, commit 시 .gitignore에 Gemfile.lock을 추가 후 넣어 주시길 바라겠습니다.) commit후 git bash 또는 powerShell을 통해 설정을 합시다. chirpy theme 설정(1) git bash 또는 powerShell을 통해 bash tools/init.sh 명령어로 기초 설정을 하겠습니다.(2) 이후 아래 명령어를 통해 Dependencies 설치를 해줍시다.$ bundle(3) 로컬 서버로 적용된 테마가 잘 동작하는지 확인해 보겠습니다.$ bundle exec jekyll sremote git-page repo 설정(1) chripy theme 설정에서 bash tools/init.sh 명령어를 실행한 이후 local repo의 remote repo와 상태가 다를 겁니다. 상태가 다르니 커밋을 해주어 상태를 맞춰 줍시다.(2) remote repo와 local repo의 상태가 같다면 remote repo에서 action을 통해 빌드가 잘 되었는지 확인해봅시다.(3) 빌드가 잘 되었다면, https://username/github.io 로 접속하여 확인해봅시다.reference blog : https://www.irgroup.org/posts/jekyll-chirpy/이상한 용어 혹은 잘못된 표현이 있을 경우 메일이나 github에 이슈로 피드백 남겨주시면 감사하겠습니다. ^__^" } ]
